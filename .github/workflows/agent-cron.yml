name: build-json

on:
  schedule:
    - cron: '0 6 * * *'     # täglich 06:00 UTC
  workflow_dispatch:         # manueller Start möglich

# Damit parallele Läufe sich nicht ins Gehege kommen
concurrency:
  group: build-json-${{ github.ref }}
  cancel-in-progress: true

# Für Commit & Push benötigt
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0      # volle Historie (für fetch/rebase vor dem Push)

      - name: Show repo tree
        run: |
          echo "Branch: $GITHUB_REF"
          ls -la
          ls -la scripts || true
          ls -la data || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests beautifulsoup4 openai
          fi

      # Optional: nur zur Kontrolle, ob das Secret ankommt (loggt keine Key-Werte)
      - name: Check OPENAI_API_KEY presence
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "OPENAI_API_KEY not set (OK, dann läuft Fallback ohne LLM)."
          else
            echo "OPENAI_API_KEY present."
          fi

      # Führt dein build_json.py aus – Pfad wird automatisch ermittelt
      - name: Build JSON (auto-discover)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          SCRIPT=$(git ls-files | grep -E '(^|/)build_json\.py$' | head -n 1 || true)
          if [ -z "$SCRIPT" ]; then
            echo "::error::build_json.py not found. Expected at scripts/build_json.py or similar."
            exit 0
          fi
          echo "Running: $SCRIPT"
          python "$SCRIPT" || true    # nicht hart fehlschlagen lassen

      # Falls das Script nichts erzeugt hat, schreiben wir eine gültige Fallback-Datei
      - name: Ensure output exists (fallback)
        run: |
          if [ ! -f data/latest.json ]; then
            echo "No data/latest.json produced – writing fallback."
            mkdir -p data
            TS=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            printf '%s' "{\n  \"company\": \"Pernod Ricard\",\n  \"generated_at\": \"${TS}\",\n  \"signals\": [],\n  \"sources\": []\n}\n" > data/latest.json
          fi

      - name: Show output
        run: |
          wc -c data/latest.json || true
          head -n 40 data/latest.json || true

      - name: Commit & push
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add data/latest.json

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "update data $(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          # Remote-Änderungen holen und rebasen (bevorzugt lineare Historie)
          git fetch origin "$BRANCH_NAME"
          if ! git rebase "origin/$BRANCH_NAME"; then
            echo "Rebase failed, abort -> merge fallback"
            git rebase --abort || true
            git pull --no-rebase --no-edit origin "$BRANCH_NAME" || true
          fi

          # Push mit sicherem Fallback
          git push origin HEAD:"$BRANCH_NAME" || git push --force-with-lease origin HEAD:"$BRANCH_NAME"
